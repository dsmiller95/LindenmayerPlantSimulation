#define resourceNodeTargetMax 4

## S is a resource source node
#symbols S
#matches S
#export SourceNode S
S(x) -> S(x)B(x)

## R is a resource diffusion/distribution node
## when a second parameter is specified, it is used as a soft resource cap. when the node has at least that much in resources, it will not request any more resources
#symbols R
#matches R
#export DistributorNode R

       R(x) > A(a) -> R(x + a)
B(b) < R(x) > A(a) -> R(x + a + b)
B(b) < R(x)        -> R(x + b)
       R(x)        -> R(x)
	   
       R(x, y) > A(a) -> R(x + a, y)
B(b) < R(x, y) > A(a) -> R(x + a + b, y)
B(b) < R(x, y)        -> R(x + b, y)
       R(x, y)        -> R(x, y)

## Randomly decide whether or not to pull resources forward
## P(0.2) | R(a)Q < R(x) : a >= 1 && x < resourceNodeTargetMax -> A(-a / 2)R(x + a / 2)
## P(0.8) | R(a)Q < R(x) : a >= 1 && x < resourceNodeTargetMax -> R(x)


## W is a node which pull resources forward from the base into a branch
##	Pulls resources when any are available from the root node, and will generate
##	a back-propigating negative command and a forward-propigating positive command
## Randomly decide whether or not to pull resources forward
## use W to mark the root of each leaf in a branching section

#symbols W
#matches W
#export LeafNode W
P(0.5) | R(a   )Q < W > R(b   ) : a >= 1 && b < a -> A(-(a - b) * .9)WB((a - b) * .9)
P(0.5) | R(a   )Q < W > R(b   ) : a >= 1 && b < a -> W

P(0.5) | R(a, x)Q < W > R(b   ) : a >= 1 && b < a -> A(-(a - b) * .9)WB((a - b) * .9)
P(0.5) | R(a, x)Q < W > R(b   ) : a >= 1 && b < a -> W

P(0.5) | R(a   )Q < W > R(b, y) : a >= 1 && b < a && b < y -> A(-(a - b) * .9)WB((a - b) * .9)
P(0.5) | R(a   )Q < W > R(b, y) : a >= 1 && b < a && b < y -> W

P(0.5) | R(a, x)Q < W > R(b, y) : a >= 1 && b < a && b < y -> A(-(a - b) * .9)WB((a - b) * .9)
P(0.5) | R(a, x)Q < W > R(b, y) : a >= 1 && b < a && b < y -> W



## Q is a resource amount downpropigation node
## use Q to label the base of a branching section
#symbols Q
#matches Q
#export LeafBaseNode Q

Q > [A(x)][A(y)][A(z)][A(c)] -> A(x + y + z + c)Q
Q > [A(x)][A(y)][A(z)] -> A(x + y + z)Q
Q > [A(x)][A(y)] -> A(x + y)Q
Q > [A(x)] -> A(x)Q

## T is a resource amount up and down propigator
## use T to mark strings of non-branching another resource node s
## #symbols T
## #matches T
## #export StringNode T
## P(0.5) | R(a) < T > R(x) : a >= 1 && x < a -> A(-(a - x) * .9)TB((a - x) * .9)
## P(0.5) | R(a) < T > R(x) : a >= 1 && x < a -> T
## P(0.5) | R(a)Q < T > R(x) : a >= 1 && x < a -> A(-(a - x) * .9)TB((a - x) * .9)
## P(0.5) | R(a)Q < T > R(x) : a >= 1 && x < a -> T


## A is a resource amount, propigating downwards, to be captured by a resource node
#symbols A
#matches A
#export DownwardSubtraction A
A(x)        -> 
A(x) > A(y) -> A(y)

## B is a resource amount, propigating upwards, to be captured by a resource node
#symbols B
#matches B
#export UpwardAddition B

       B(x) -> 
B(y) < B(x) -> B(y)

